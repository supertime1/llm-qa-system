// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: medical_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MedicalService_AskQuestion_FullMethodName  = "/backend.MedicalService/AskQuestion"
	MedicalService_ReviewAnswer_FullMethodName = "/backend.MedicalService/ReviewAnswer"
)

// MedicalServiceClient is the client API for MedicalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Backend Service - Handles business logic and data operations
type MedicalServiceClient interface {
	// Patient asks a question
	AskQuestion(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (*QuestionResponse, error)
	// Doctor reviews an answer
	ReviewAnswer(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
}

type medicalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicalServiceClient(cc grpc.ClientConnInterface) MedicalServiceClient {
	return &medicalServiceClient{cc}
}

func (c *medicalServiceClient) AskQuestion(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (*QuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuestionResponse)
	err := c.cc.Invoke(ctx, MedicalService_AskQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalServiceClient) ReviewAnswer(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewResponse)
	err := c.cc.Invoke(ctx, MedicalService_ReviewAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedicalServiceServer is the server API for MedicalService service.
// All implementations must embed UnimplementedMedicalServiceServer
// for forward compatibility.
//
// Backend Service - Handles business logic and data operations
type MedicalServiceServer interface {
	// Patient asks a question
	AskQuestion(context.Context, *QuestionRequest) (*QuestionResponse, error)
	// Doctor reviews an answer
	ReviewAnswer(context.Context, *ReviewRequest) (*ReviewResponse, error)
	mustEmbedUnimplementedMedicalServiceServer()
}

// UnimplementedMedicalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMedicalServiceServer struct{}

func (UnimplementedMedicalServiceServer) AskQuestion(context.Context, *QuestionRequest) (*QuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskQuestion not implemented")
}
func (UnimplementedMedicalServiceServer) ReviewAnswer(context.Context, *ReviewRequest) (*ReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewAnswer not implemented")
}
func (UnimplementedMedicalServiceServer) mustEmbedUnimplementedMedicalServiceServer() {}
func (UnimplementedMedicalServiceServer) testEmbeddedByValue()                        {}

// UnsafeMedicalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicalServiceServer will
// result in compilation errors.
type UnsafeMedicalServiceServer interface {
	mustEmbedUnimplementedMedicalServiceServer()
}

func RegisterMedicalServiceServer(s grpc.ServiceRegistrar, srv MedicalServiceServer) {
	// If the following call pancis, it indicates UnimplementedMedicalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MedicalService_ServiceDesc, srv)
}

func _MedicalService_AskQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).AskQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_AskQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).AskQuestion(ctx, req.(*QuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalService_ReviewAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).ReviewAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_ReviewAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).ReviewAnswer(ctx, req.(*ReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedicalService_ServiceDesc is the grpc.ServiceDesc for MedicalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedicalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.MedicalService",
	HandlerType: (*MedicalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskQuestion",
			Handler:    _MedicalService_AskQuestion_Handler,
		},
		{
			MethodName: "ReviewAnswer",
			Handler:    _MedicalService_ReviewAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medical_service.proto",
}
