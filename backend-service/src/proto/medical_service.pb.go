// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.29.1
// source: medical_service.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Common types
type QuestionType int32

const (
	QuestionType_TYPE_UNSPECIFIED QuestionType = 0 // Default value when type is not specified
	QuestionType_TYPE_GENERAL     QuestionType = 1 // e.g., "What are the symptoms of flu?"
	QuestionType_TYPE_MEDICATION  QuestionType = 2 // e.g., "Can I take ibuprofen with my current medications?"
	QuestionType_TYPE_DIAGNOSIS   QuestionType = 3 // e.g., "What could these symptoms indicate?"
	QuestionType_TYPE_FOLLOW_UP   QuestionType = 4 // e.g., "How should I monitor my condition after treatment?"
)

// Enum value maps for QuestionType.
var (
	QuestionType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_GENERAL",
		2: "TYPE_MEDICATION",
		3: "TYPE_DIAGNOSIS",
		4: "TYPE_FOLLOW_UP",
	}
	QuestionType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_GENERAL":     1,
		"TYPE_MEDICATION":  2,
		"TYPE_DIAGNOSIS":   3,
		"TYPE_FOLLOW_UP":   4,
	}
)

func (x QuestionType) Enum() *QuestionType {
	p := new(QuestionType)
	*p = x
	return p
}

func (x QuestionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionType) Descriptor() protoreflect.EnumDescriptor {
	return file_medical_service_proto_enumTypes[0].Descriptor()
}

func (QuestionType) Type() protoreflect.EnumType {
	return &file_medical_service_proto_enumTypes[0]
}

func (x QuestionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionType.Descriptor instead.
func (QuestionType) EnumDescriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{0}
}

type QuestionStatus int32

const (
	QuestionStatus_STATUS_UNSPECIFIED    QuestionStatus = 0
	QuestionStatus_STATUS_PENDING        QuestionStatus = 1 // Question just submitted
	QuestionStatus_STATUS_PROCESSING     QuestionStatus = 2 // AI is generating answer
	QuestionStatus_STATUS_PENDING_REVIEW QuestionStatus = 3 // AI finished, waiting for doctor
	QuestionStatus_STATUS_UNDER_REVIEW   QuestionStatus = 4 // Doctor currently reviewing
	QuestionStatus_STATUS_ANSWERED       QuestionStatus = 5 // Final answer available to patient
	QuestionStatus_STATUS_REJECTED       QuestionStatus = 6 // Question rejected (inappropriate/unclear)
)

// Enum value maps for QuestionStatus.
var (
	QuestionStatus_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_PENDING",
		2: "STATUS_PROCESSING",
		3: "STATUS_PENDING_REVIEW",
		4: "STATUS_UNDER_REVIEW",
		5: "STATUS_ANSWERED",
		6: "STATUS_REJECTED",
	}
	QuestionStatus_value = map[string]int32{
		"STATUS_UNSPECIFIED":    0,
		"STATUS_PENDING":        1,
		"STATUS_PROCESSING":     2,
		"STATUS_PENDING_REVIEW": 3,
		"STATUS_UNDER_REVIEW":   4,
		"STATUS_ANSWERED":       5,
		"STATUS_REJECTED":       6,
	}
)

func (x QuestionStatus) Enum() *QuestionStatus {
	p := new(QuestionStatus)
	*p = x
	return p
}

func (x QuestionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_medical_service_proto_enumTypes[1].Descriptor()
}

func (QuestionStatus) Type() protoreflect.EnumType {
	return &file_medical_service_proto_enumTypes[1]
}

func (x QuestionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionStatus.Descriptor instead.
func (QuestionStatus) EnumDescriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{1}
}

type Department int32

const (
	Department_DEPT_UNSPECIFIED      Department = 0
	Department_DEPT_GENERAL_MEDICINE Department = 1 // General health questions
	Department_DEPT_CARDIOLOGY       Department = 2 // Heart-related questions
	Department_DEPT_PEDIATRICS       Department = 3 // Child health questions
	Department_DEPT_DERMATOLOGY      Department = 4 // Skin-related questions
)

// Enum value maps for Department.
var (
	Department_name = map[int32]string{
		0: "DEPT_UNSPECIFIED",
		1: "DEPT_GENERAL_MEDICINE",
		2: "DEPT_CARDIOLOGY",
		3: "DEPT_PEDIATRICS",
		4: "DEPT_DERMATOLOGY",
	}
	Department_value = map[string]int32{
		"DEPT_UNSPECIFIED":      0,
		"DEPT_GENERAL_MEDICINE": 1,
		"DEPT_CARDIOLOGY":       2,
		"DEPT_PEDIATRICS":       3,
		"DEPT_DERMATOLOGY":      4,
	}
)

func (x Department) Enum() *Department {
	p := new(Department)
	*p = x
	return p
}

func (x Department) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Department) Descriptor() protoreflect.EnumDescriptor {
	return file_medical_service_proto_enumTypes[2].Descriptor()
}

func (Department) Type() protoreflect.EnumType {
	return &file_medical_service_proto_enumTypes[2]
}

func (x Department) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Department.Descriptor instead.
func (Department) EnumDescriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{2}
}

type ReviewDecision int32

const (
	ReviewDecision_DECISION_UNSPECIFIED ReviewDecision = 0
	ReviewDecision_DECISION_APPROVED    ReviewDecision = 1 // AI answer can be sent as-is
	ReviewDecision_DECISION_MODIFIED    ReviewDecision = 2 // AI answer was edited
	ReviewDecision_DECISION_REJECTED    ReviewDecision = 3 // AI answer was inappropriate
)

// Enum value maps for ReviewDecision.
var (
	ReviewDecision_name = map[int32]string{
		0: "DECISION_UNSPECIFIED",
		1: "DECISION_APPROVED",
		2: "DECISION_MODIFIED",
		3: "DECISION_REJECTED",
	}
	ReviewDecision_value = map[string]int32{
		"DECISION_UNSPECIFIED": 0,
		"DECISION_APPROVED":    1,
		"DECISION_MODIFIED":    2,
		"DECISION_REJECTED":    3,
	}
)

func (x ReviewDecision) Enum() *ReviewDecision {
	p := new(ReviewDecision)
	*p = x
	return p
}

func (x ReviewDecision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewDecision) Descriptor() protoreflect.EnumDescriptor {
	return file_medical_service_proto_enumTypes[3].Descriptor()
}

func (ReviewDecision) Type() protoreflect.EnumType {
	return &file_medical_service_proto_enumTypes[3]
}

func (x ReviewDecision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewDecision.Descriptor instead.
func (ReviewDecision) EnumDescriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{3}
}

type PaginationParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`   // Number of items per page (e.g., 10)
	Offset        int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"` // Starting position (e.g., 0 for first page, 10 for second page)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PaginationParams) Reset() {
	*x = PaginationParams{}
	mi := &file_medical_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationParams) ProtoMessage() {}

func (x *PaginationParams) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationParams.ProtoReflect.Descriptor instead.
func (*PaginationParams) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{0}
}

func (x *PaginationParams) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationParams) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Patient operations messages
type PatientQuestionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PatientId     string                 `protobuf:"bytes,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`                                     // UUID of the patient
	QuestionText  string                 `protobuf:"bytes,2,opt,name=question_text,json=questionText,proto3" json:"question_text,omitempty"`                            // The actual question (e.g., "What are the side effects of aspirin?")
	QuestionType  QuestionType           `protobuf:"varint,3,opt,name=question_type,json=questionType,proto3,enum=backend.QuestionType" json:"question_type,omitempty"` // Category of question (e.g., TYPE_MEDICATION)
	Department    Department             `protobuf:"varint,4,opt,name=department,proto3,enum=backend.Department" json:"department,omitempty"`                           // Relevant department (e.g., DEPT_CARDIOLOGY)
	UrgencyLevel  int32                  `protobuf:"varint,5,opt,name=urgency_level,json=urgencyLevel,proto3" json:"urgency_level,omitempty"`                           // 1-5 scale (1=routine, 5=urgent)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PatientQuestionRequest) Reset() {
	*x = PatientQuestionRequest{}
	mi := &file_medical_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatientQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientQuestionRequest) ProtoMessage() {}

func (x *PatientQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientQuestionRequest.ProtoReflect.Descriptor instead.
func (*PatientQuestionRequest) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{1}
}

func (x *PatientQuestionRequest) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *PatientQuestionRequest) GetQuestionText() string {
	if x != nil {
		return x.QuestionText
	}
	return ""
}

func (x *PatientQuestionRequest) GetQuestionType() QuestionType {
	if x != nil {
		return x.QuestionType
	}
	return QuestionType_TYPE_UNSPECIFIED
}

func (x *PatientQuestionRequest) GetDepartment() Department {
	if x != nil {
		return x.Department
	}
	return Department_DEPT_UNSPECIFIED
}

func (x *PatientQuestionRequest) GetUrgencyLevel() int32 {
	if x != nil {
		return x.UrgencyLevel
	}
	return 0
}

type PatientQuestionResponse struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	QuestionId string                 `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`    // UUID of the created question
	Status     QuestionStatus         `protobuf:"varint,2,opt,name=status,proto3,enum=backend.QuestionStatus" json:"status,omitempty"` // Initial status (usually STATUS_PENDING)
	// google.protobuf.Timestamp estimated_completion_time = 3;  // When answer is expected
	ErrorMessage  string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Error details if submission failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PatientQuestionResponse) Reset() {
	*x = PatientQuestionResponse{}
	mi := &file_medical_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatientQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientQuestionResponse) ProtoMessage() {}

func (x *PatientQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientQuestionResponse.ProtoReflect.Descriptor instead.
func (*PatientQuestionResponse) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{2}
}

func (x *PatientQuestionResponse) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *PatientQuestionResponse) GetStatus() QuestionStatus {
	if x != nil {
		return x.Status
	}
	return QuestionStatus_STATUS_UNSPECIFIED
}

func (x *PatientQuestionResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type QuestionStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuestionId    string                 `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"` // UUID of the question to check
	PatientId     string                 `protobuf:"bytes,2,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`    // Patient UUID for authorization
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionStatusRequest) Reset() {
	*x = QuestionStatusRequest{}
	mi := &file_medical_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionStatusRequest) ProtoMessage() {}

func (x *QuestionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionStatusRequest.ProtoReflect.Descriptor instead.
func (*QuestionStatusRequest) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{3}
}

func (x *QuestionStatusRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *QuestionStatusRequest) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

type QuestionStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuestionId    string                 `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`       // Question UUID
	Status        QuestionStatus         `protobuf:"varint,2,opt,name=status,proto3,enum=backend.QuestionStatus" json:"status,omitempty"`    // Current status
	Answer        string                 `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`                                 // Answer text (if status is ANSWERED)
	AnsweredAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=answered_at,json=answeredAt,proto3" json:"answered_at,omitempty"`       // When the answer was provided
	AnsweredBy    string                 `protobuf:"bytes,5,opt,name=answered_by,json=answeredBy,proto3" json:"answered_by,omitempty"`       // Doctor's ID or name who reviewed
	ErrorMessage  string                 `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Any error information
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionStatusResponse) Reset() {
	*x = QuestionStatusResponse{}
	mi := &file_medical_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionStatusResponse) ProtoMessage() {}

func (x *QuestionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionStatusResponse.ProtoReflect.Descriptor instead.
func (*QuestionStatusResponse) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{4}
}

func (x *QuestionStatusResponse) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *QuestionStatusResponse) GetStatus() QuestionStatus {
	if x != nil {
		return x.Status
	}
	return QuestionStatus_STATUS_UNSPECIFIED
}

func (x *QuestionStatusResponse) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *QuestionStatusResponse) GetAnsweredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AnsweredAt
	}
	return nil
}

func (x *QuestionStatusResponse) GetAnsweredBy() string {
	if x != nil {
		return x.AnsweredBy
	}
	return ""
}

func (x *QuestionStatusResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type AnswerHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PatientId     string                 `protobuf:"bytes,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`                                       // Patient UUID
	Pagination    *PaginationParams      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`                                                      // e.g., {limit: 10, offset: 0} for first page
	StatusFilter  QuestionStatus         `protobuf:"varint,3,opt,name=status_filter,json=statusFilter,proto3,enum=backend.QuestionStatus" json:"status_filter,omitempty"` // Filter by status (e.g., only ANSWERED)
	DateFrom      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`                                          // Start date for history
	DateTo        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`                                                // End date for history
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnswerHistoryRequest) Reset() {
	*x = AnswerHistoryRequest{}
	mi := &file_medical_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerHistoryRequest) ProtoMessage() {}

func (x *AnswerHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerHistoryRequest.ProtoReflect.Descriptor instead.
func (*AnswerHistoryRequest) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{5}
}

func (x *AnswerHistoryRequest) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *AnswerHistoryRequest) GetPagination() *PaginationParams {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *AnswerHistoryRequest) GetStatusFilter() QuestionStatus {
	if x != nil {
		return x.StatusFilter
	}
	return QuestionStatus_STATUS_UNSPECIFIED
}

func (x *AnswerHistoryRequest) GetDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *AnswerHistoryRequest) GetDateTo() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTo
	}
	return nil
}

type AnswerHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answers       []*QuestionAnswer      `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`                          // List of answers
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // Total number of answers (for pagination)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnswerHistoryResponse) Reset() {
	*x = AnswerHistoryResponse{}
	mi := &file_medical_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerHistoryResponse) ProtoMessage() {}

func (x *AnswerHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerHistoryResponse.ProtoReflect.Descriptor instead.
func (*AnswerHistoryResponse) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{6}
}

func (x *AnswerHistoryResponse) GetAnswers() []*QuestionAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *AnswerHistoryResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type QuestionAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuestionId    string                 `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`                                  // Question UUID
	QuestionText  string                 `protobuf:"bytes,2,opt,name=question_text,json=questionText,proto3" json:"question_text,omitempty"`                            // Original question
	QuestionType  QuestionType           `protobuf:"varint,3,opt,name=question_type,json=questionType,proto3,enum=backend.QuestionType" json:"question_type,omitempty"` // Question category
	Department    Department             `protobuf:"varint,4,opt,name=department,proto3,enum=backend.Department" json:"department,omitempty"`                           // Relevant department
	Answer        string                 `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`                                                            // Answer text
	Status        QuestionStatus         `protobuf:"varint,6,opt,name=status,proto3,enum=backend.QuestionStatus" json:"status,omitempty"`                               // Current status
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                     // When question was asked
	AnsweredAt    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=answered_at,json=answeredAt,proto3" json:"answered_at,omitempty"`                                  // When answer was provided
	AnsweredBy    string                 `protobuf:"bytes,9,opt,name=answered_by,json=answeredBy,proto3" json:"answered_by,omitempty"`                                  // Doctor who answered
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionAnswer) Reset() {
	*x = QuestionAnswer{}
	mi := &file_medical_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionAnswer) ProtoMessage() {}

func (x *QuestionAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionAnswer.ProtoReflect.Descriptor instead.
func (*QuestionAnswer) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{7}
}

func (x *QuestionAnswer) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *QuestionAnswer) GetQuestionText() string {
	if x != nil {
		return x.QuestionText
	}
	return ""
}

func (x *QuestionAnswer) GetQuestionType() QuestionType {
	if x != nil {
		return x.QuestionType
	}
	return QuestionType_TYPE_UNSPECIFIED
}

func (x *QuestionAnswer) GetDepartment() Department {
	if x != nil {
		return x.Department
	}
	return Department_DEPT_UNSPECIFIED
}

func (x *QuestionAnswer) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *QuestionAnswer) GetStatus() QuestionStatus {
	if x != nil {
		return x.Status
	}
	return QuestionStatus_STATUS_UNSPECIFIED
}

func (x *QuestionAnswer) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *QuestionAnswer) GetAnsweredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AnsweredAt
	}
	return nil
}

func (x *QuestionAnswer) GetAnsweredBy() string {
	if x != nil {
		return x.AnsweredBy
	}
	return ""
}

// Doctor operations messages
type PendingReviewsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DoctorId      string                 `protobuf:"bytes,1,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id,omitempty"` // Doctor UUID
	Pagination    *PaginationParams      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`             // Pagination for reviews list
	Filter        *ReviewFilter          `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`                     // Filter criteria
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PendingReviewsRequest) Reset() {
	*x = PendingReviewsRequest{}
	mi := &file_medical_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PendingReviewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingReviewsRequest) ProtoMessage() {}

func (x *PendingReviewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingReviewsRequest.ProtoReflect.Descriptor instead.
func (*PendingReviewsRequest) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{8}
}

func (x *PendingReviewsRequest) GetDoctorId() string {
	if x != nil {
		return x.DoctorId
	}
	return ""
}

func (x *PendingReviewsRequest) GetPagination() *PaginationParams {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *PendingReviewsRequest) GetFilter() *ReviewFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ReviewFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Department    Department             `protobuf:"varint,1,opt,name=department,proto3,enum=backend.Department" json:"department,omitempty"`                           // Filter by department (e.g., DEPT_CARDIOLOGY)
	QuestionType  QuestionType           `protobuf:"varint,2,opt,name=question_type,json=questionType,proto3,enum=backend.QuestionType" json:"question_type,omitempty"` // Filter by question type
	MinUrgency    int32                  `protobuf:"varint,3,opt,name=min_urgency,json=minUrgency,proto3" json:"min_urgency,omitempty"`                                 // Minimum urgency level (1-5)
	Since         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=since,proto3" json:"since,omitempty"`                                                              // Start date for reviews
	Until         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=until,proto3" json:"until,omitempty"`                                                              // End date for reviews
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReviewFilter) Reset() {
	*x = ReviewFilter{}
	mi := &file_medical_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewFilter) ProtoMessage() {}

func (x *ReviewFilter) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewFilter.ProtoReflect.Descriptor instead.
func (*ReviewFilter) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{9}
}

func (x *ReviewFilter) GetDepartment() Department {
	if x != nil {
		return x.Department
	}
	return Department_DEPT_UNSPECIFIED
}

func (x *ReviewFilter) GetQuestionType() QuestionType {
	if x != nil {
		return x.QuestionType
	}
	return QuestionType_TYPE_UNSPECIFIED
}

func (x *ReviewFilter) GetMinUrgency() int32 {
	if x != nil {
		return x.MinUrgency
	}
	return 0
}

func (x *ReviewFilter) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *ReviewFilter) GetUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.Until
	}
	return nil
}

type PendingReviewsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reviews       []*PendingReview       `protobuf:"bytes,1,rep,name=reviews,proto3" json:"reviews,omitempty"`                          // List of reviews needing attention
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // Total number of pending reviews
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PendingReviewsResponse) Reset() {
	*x = PendingReviewsResponse{}
	mi := &file_medical_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PendingReviewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingReviewsResponse) ProtoMessage() {}

func (x *PendingReviewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingReviewsResponse.ProtoReflect.Descriptor instead.
func (*PendingReviewsResponse) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{10}
}

func (x *PendingReviewsResponse) GetReviews() []*PendingReview {
	if x != nil {
		return x.Reviews
	}
	return nil
}

func (x *PendingReviewsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type PendingReview struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuestionId    string                 `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`                                  // Question UUID
	PatientId     string                 `protobuf:"bytes,2,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`                                     // Patient UUID
	QuestionText  string                 `protobuf:"bytes,3,opt,name=question_text,json=questionText,proto3" json:"question_text,omitempty"`                            // Original question
	QuestionType  QuestionType           `protobuf:"varint,4,opt,name=question_type,json=questionType,proto3,enum=backend.QuestionType" json:"question_type,omitempty"` // Question category
	Department    Department             `protobuf:"varint,5,opt,name=department,proto3,enum=backend.Department" json:"department,omitempty"`                           // Relevant department
	UrgencyLevel  int32                  `protobuf:"varint,6,opt,name=urgency_level,json=urgencyLevel,proto3" json:"urgency_level,omitempty"`                           // Question urgency (1-5)
	AiDraftAnswer string                 `protobuf:"bytes,7,opt,name=ai_draft_answer,json=aiDraftAnswer,proto3" json:"ai_draft_answer,omitempty"`                       // AI-generated answer
	AiConfidence  float32                `protobuf:"fixed32,8,opt,name=ai_confidence,json=aiConfidence,proto3" json:"ai_confidence,omitempty"`                          // AI confidence score (0.0-1.0)
	AiReferences  []string               `protobuf:"bytes,9,rep,name=ai_references,json=aiReferences,proto3" json:"ai_references,omitempty"`                            // References used by AI
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                    // When question was submitted
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PendingReview) Reset() {
	*x = PendingReview{}
	mi := &file_medical_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PendingReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingReview) ProtoMessage() {}

func (x *PendingReview) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingReview.ProtoReflect.Descriptor instead.
func (*PendingReview) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{11}
}

func (x *PendingReview) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *PendingReview) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *PendingReview) GetQuestionText() string {
	if x != nil {
		return x.QuestionText
	}
	return ""
}

func (x *PendingReview) GetQuestionType() QuestionType {
	if x != nil {
		return x.QuestionType
	}
	return QuestionType_TYPE_UNSPECIFIED
}

func (x *PendingReview) GetDepartment() Department {
	if x != nil {
		return x.Department
	}
	return Department_DEPT_UNSPECIFIED
}

func (x *PendingReview) GetUrgencyLevel() int32 {
	if x != nil {
		return x.UrgencyLevel
	}
	return 0
}

func (x *PendingReview) GetAiDraftAnswer() string {
	if x != nil {
		return x.AiDraftAnswer
	}
	return ""
}

func (x *PendingReview) GetAiConfidence() float32 {
	if x != nil {
		return x.AiConfidence
	}
	return 0
}

func (x *PendingReview) GetAiReferences() []string {
	if x != nil {
		return x.AiReferences
	}
	return nil
}

func (x *PendingReview) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ReviewSubmissionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	QuestionId     string                 `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`             // Question being reviewed
	DoctorId       string                 `protobuf:"bytes,2,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id,omitempty"`                   // Reviewing doctor's UUID
	Decision       ReviewDecision         `protobuf:"varint,3,opt,name=decision,proto3,enum=backend.ReviewDecision" json:"decision,omitempty"`      // Review decision
	ModifiedAnswer string                 `protobuf:"bytes,4,opt,name=modified_answer,json=modifiedAnswer,proto3" json:"modified_answer,omitempty"` // Modified/new answer if needed
	ReviewComment  string                 `protobuf:"bytes,5,opt,name=review_comment,json=reviewComment,proto3" json:"review_comment,omitempty"`    // Optional feedback/notes
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReviewSubmissionRequest) Reset() {
	*x = ReviewSubmissionRequest{}
	mi := &file_medical_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewSubmissionRequest) ProtoMessage() {}

func (x *ReviewSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewSubmissionRequest.ProtoReflect.Descriptor instead.
func (*ReviewSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{12}
}

func (x *ReviewSubmissionRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *ReviewSubmissionRequest) GetDoctorId() string {
	if x != nil {
		return x.DoctorId
	}
	return ""
}

func (x *ReviewSubmissionRequest) GetDecision() ReviewDecision {
	if x != nil {
		return x.Decision
	}
	return ReviewDecision_DECISION_UNSPECIFIED
}

func (x *ReviewSubmissionRequest) GetModifiedAnswer() string {
	if x != nil {
		return x.ModifiedAnswer
	}
	return ""
}

func (x *ReviewSubmissionRequest) GetReviewComment() string {
	if x != nil {
		return x.ReviewComment
	}
	return ""
}

type ReviewSubmissionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                                                  // Whether review was submitted successfully
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                     // Error details if submission failed
	NewStatus     QuestionStatus         `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=backend.QuestionStatus" json:"new_status,omitempty"` // New status after review
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReviewSubmissionResponse) Reset() {
	*x = ReviewSubmissionResponse{}
	mi := &file_medical_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewSubmissionResponse) ProtoMessage() {}

func (x *ReviewSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewSubmissionResponse.ProtoReflect.Descriptor instead.
func (*ReviewSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{13}
}

func (x *ReviewSubmissionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReviewSubmissionResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ReviewSubmissionResponse) GetNewStatus() QuestionStatus {
	if x != nil {
		return x.NewStatus
	}
	return QuestionStatus_STATUS_UNSPECIFIED
}

var File_medical_service_proto protoreflect.FileDescriptor

var file_medical_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x40, 0x0a, 0x10, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x72, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x90, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x15, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x85, 0x02, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9c, 0x02, 0x0a,
	0x14, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x22, 0x6b, 0x0a, 0x15, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa9, 0x03, 0x0a, 0x0e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a,
	0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x65, 0x64, 0x42, 0x79, 0x22, 0x9e, 0x01, 0x0a, 0x15, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x84, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x75,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69,
	0x6e, 0x55, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x6b, 0x0a, 0x16,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb7, 0x03, 0x0a, 0x0d, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x3a, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x69, 0x5f, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x69, 0x44, 0x72, 0x61, 0x66, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x61, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x69, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x73, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x47,
	0x4e, 0x4f, 0x53, 0x49, 0x53, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x50, 0x10, 0x04, 0x2a, 0xb1, 0x01, 0x0a, 0x0e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x56,
	0x49, 0x45, 0x57, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x2a,
	0x7d, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x10, 0x44, 0x45, 0x50, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x50, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x45, 0x50, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x49, 0x4f, 0x4c, 0x4f, 0x47,
	0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x50, 0x54, 0x5f, 0x50, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x50, 0x54,
	0x5f, 0x44, 0x45, 0x52, 0x4d, 0x41, 0x54, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x10, 0x04, 0x2a, 0x6f,
	0x0a, 0x0e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45,
	0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x43, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x32,
	0xc3, 0x03, 0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1e, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x20,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x2f, 0x6c,
	0x6c, 0x6d, 0x2d, 0x71, 0x61, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x72, 0x63,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_medical_service_proto_rawDescOnce sync.Once
	file_medical_service_proto_rawDescData = file_medical_service_proto_rawDesc
)

func file_medical_service_proto_rawDescGZIP() []byte {
	file_medical_service_proto_rawDescOnce.Do(func() {
		file_medical_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_medical_service_proto_rawDescData)
	})
	return file_medical_service_proto_rawDescData
}

var file_medical_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_medical_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_medical_service_proto_goTypes = []any{
	(QuestionType)(0),                // 0: backend.QuestionType
	(QuestionStatus)(0),              // 1: backend.QuestionStatus
	(Department)(0),                  // 2: backend.Department
	(ReviewDecision)(0),              // 3: backend.ReviewDecision
	(*PaginationParams)(nil),         // 4: backend.PaginationParams
	(*PatientQuestionRequest)(nil),   // 5: backend.PatientQuestionRequest
	(*PatientQuestionResponse)(nil),  // 6: backend.PatientQuestionResponse
	(*QuestionStatusRequest)(nil),    // 7: backend.QuestionStatusRequest
	(*QuestionStatusResponse)(nil),   // 8: backend.QuestionStatusResponse
	(*AnswerHistoryRequest)(nil),     // 9: backend.AnswerHistoryRequest
	(*AnswerHistoryResponse)(nil),    // 10: backend.AnswerHistoryResponse
	(*QuestionAnswer)(nil),           // 11: backend.QuestionAnswer
	(*PendingReviewsRequest)(nil),    // 12: backend.PendingReviewsRequest
	(*ReviewFilter)(nil),             // 13: backend.ReviewFilter
	(*PendingReviewsResponse)(nil),   // 14: backend.PendingReviewsResponse
	(*PendingReview)(nil),            // 15: backend.PendingReview
	(*ReviewSubmissionRequest)(nil),  // 16: backend.ReviewSubmissionRequest
	(*ReviewSubmissionResponse)(nil), // 17: backend.ReviewSubmissionResponse
	(*timestamppb.Timestamp)(nil),    // 18: google.protobuf.Timestamp
}
var file_medical_service_proto_depIdxs = []int32{
	0,  // 0: backend.PatientQuestionRequest.question_type:type_name -> backend.QuestionType
	2,  // 1: backend.PatientQuestionRequest.department:type_name -> backend.Department
	1,  // 2: backend.PatientQuestionResponse.status:type_name -> backend.QuestionStatus
	1,  // 3: backend.QuestionStatusResponse.status:type_name -> backend.QuestionStatus
	18, // 4: backend.QuestionStatusResponse.answered_at:type_name -> google.protobuf.Timestamp
	4,  // 5: backend.AnswerHistoryRequest.pagination:type_name -> backend.PaginationParams
	1,  // 6: backend.AnswerHistoryRequest.status_filter:type_name -> backend.QuestionStatus
	18, // 7: backend.AnswerHistoryRequest.date_from:type_name -> google.protobuf.Timestamp
	18, // 8: backend.AnswerHistoryRequest.date_to:type_name -> google.protobuf.Timestamp
	11, // 9: backend.AnswerHistoryResponse.answers:type_name -> backend.QuestionAnswer
	0,  // 10: backend.QuestionAnswer.question_type:type_name -> backend.QuestionType
	2,  // 11: backend.QuestionAnswer.department:type_name -> backend.Department
	1,  // 12: backend.QuestionAnswer.status:type_name -> backend.QuestionStatus
	18, // 13: backend.QuestionAnswer.created_at:type_name -> google.protobuf.Timestamp
	18, // 14: backend.QuestionAnswer.answered_at:type_name -> google.protobuf.Timestamp
	4,  // 15: backend.PendingReviewsRequest.pagination:type_name -> backend.PaginationParams
	13, // 16: backend.PendingReviewsRequest.filter:type_name -> backend.ReviewFilter
	2,  // 17: backend.ReviewFilter.department:type_name -> backend.Department
	0,  // 18: backend.ReviewFilter.question_type:type_name -> backend.QuestionType
	18, // 19: backend.ReviewFilter.since:type_name -> google.protobuf.Timestamp
	18, // 20: backend.ReviewFilter.until:type_name -> google.protobuf.Timestamp
	15, // 21: backend.PendingReviewsResponse.reviews:type_name -> backend.PendingReview
	0,  // 22: backend.PendingReview.question_type:type_name -> backend.QuestionType
	2,  // 23: backend.PendingReview.department:type_name -> backend.Department
	18, // 24: backend.PendingReview.created_at:type_name -> google.protobuf.Timestamp
	3,  // 25: backend.ReviewSubmissionRequest.decision:type_name -> backend.ReviewDecision
	1,  // 26: backend.ReviewSubmissionResponse.new_status:type_name -> backend.QuestionStatus
	5,  // 27: backend.MedicalService.SubmitQuestion:input_type -> backend.PatientQuestionRequest
	7,  // 28: backend.MedicalService.GetQuestionStatus:input_type -> backend.QuestionStatusRequest
	9,  // 29: backend.MedicalService.GetAnswerHistory:input_type -> backend.AnswerHistoryRequest
	12, // 30: backend.MedicalService.GetPendingReviews:input_type -> backend.PendingReviewsRequest
	16, // 31: backend.MedicalService.SubmitReview:input_type -> backend.ReviewSubmissionRequest
	6,  // 32: backend.MedicalService.SubmitQuestion:output_type -> backend.PatientQuestionResponse
	8,  // 33: backend.MedicalService.GetQuestionStatus:output_type -> backend.QuestionStatusResponse
	10, // 34: backend.MedicalService.GetAnswerHistory:output_type -> backend.AnswerHistoryResponse
	14, // 35: backend.MedicalService.GetPendingReviews:output_type -> backend.PendingReviewsResponse
	17, // 36: backend.MedicalService.SubmitReview:output_type -> backend.ReviewSubmissionResponse
	32, // [32:37] is the sub-list for method output_type
	27, // [27:32] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_medical_service_proto_init() }
func file_medical_service_proto_init() {
	if File_medical_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_medical_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_medical_service_proto_goTypes,
		DependencyIndexes: file_medical_service_proto_depIdxs,
		EnumInfos:         file_medical_service_proto_enumTypes,
		MessageInfos:      file_medical_service_proto_msgTypes,
	}.Build()
	File_medical_service_proto = out.File
	file_medical_service_proto_rawDesc = nil
	file_medical_service_proto_goTypes = nil
	file_medical_service_proto_depIdxs = nil
}
