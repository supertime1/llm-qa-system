// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.29.1
// source: medical_service.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Role int32

const (
	Role_ROLE_UNKNOWN Role = 0
	Role_ROLE_PATIENT Role = 1
	Role_ROLE_DOCTOR  Role = 2
	Role_ROLE_SYSTEM  Role = 3
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "ROLE_UNKNOWN",
		1: "ROLE_PATIENT",
		2: "ROLE_DOCTOR",
		3: "ROLE_SYSTEM",
	}
	Role_value = map[string]int32{
		"ROLE_UNKNOWN": 0,
		"ROLE_PATIENT": 1,
		"ROLE_DOCTOR":  2,
		"ROLE_SYSTEM":  3,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_medical_service_proto_enumTypes[0].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_medical_service_proto_enumTypes[0]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{0}
}

type Gender int32

const (
	Gender_GENDER_UNKNOWN Gender = 0
	Gender_GENDER_MALE    Gender = 1
	Gender_GENDER_FEMALE  Gender = 2
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_UNKNOWN",
		1: "GENDER_MALE",
		2: "GENDER_FEMALE",
	}
	Gender_value = map[string]int32{
		"GENDER_UNKNOWN": 0,
		"GENDER_MALE":    1,
		"GENDER_FEMALE":  2,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_medical_service_proto_enumTypes[1].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_medical_service_proto_enumTypes[1]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{1}
}

type BiometricType int32

const (
	BiometricType_BIOMETRIC_UNKNOWN        BiometricType = 0
	BiometricType_BIOMETRIC_HEART_RATE     BiometricType = 1
	BiometricType_BIOMETRIC_BLOOD_OXYGEN   BiometricType = 2
	BiometricType_BIOMETRIC_BLOOD_PRESSURE BiometricType = 3
)

// Enum value maps for BiometricType.
var (
	BiometricType_name = map[int32]string{
		0: "BIOMETRIC_UNKNOWN",
		1: "BIOMETRIC_HEART_RATE",
		2: "BIOMETRIC_BLOOD_OXYGEN",
		3: "BIOMETRIC_BLOOD_PRESSURE",
	}
	BiometricType_value = map[string]int32{
		"BIOMETRIC_UNKNOWN":        0,
		"BIOMETRIC_HEART_RATE":     1,
		"BIOMETRIC_BLOOD_OXYGEN":   2,
		"BIOMETRIC_BLOOD_PRESSURE": 3,
	}
)

func (x BiometricType) Enum() *BiometricType {
	p := new(BiometricType)
	*p = x
	return p
}

func (x BiometricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BiometricType) Descriptor() protoreflect.EnumDescriptor {
	return file_medical_service_proto_enumTypes[2].Descriptor()
}

func (BiometricType) Type() protoreflect.EnumType {
	return &file_medical_service_proto_enumTypes[2]
}

func (x BiometricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BiometricType.Descriptor instead.
func (BiometricType) EnumDescriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{2}
}

// WebSocket message types
type MessageType int32

const (
	MessageType_MESSAGE_TYPE_UNSPECIFIED MessageType = 0
	MessageType_PATIENT_MESSAGE          MessageType = 1 // Questions and messages between patient and doctor
	MessageType_DOCTOR_MESSAGE           MessageType = 2 // Questions and messages between patient and doctor
	MessageType_AI_DRAFT_READY           MessageType = 3 // Server -> Doctor
	MessageType_DRAFT_REVIEW             MessageType = 4 // Doctor -> Server
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNSPECIFIED",
		1: "PATIENT_MESSAGE",
		2: "DOCTOR_MESSAGE",
		3: "AI_DRAFT_READY",
		4: "DRAFT_REVIEW",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED": 0,
		"PATIENT_MESSAGE":          1,
		"DOCTOR_MESSAGE":           2,
		"AI_DRAFT_READY":           3,
		"DRAFT_REVIEW":             4,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_medical_service_proto_enumTypes[3].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_medical_service_proto_enumTypes[3]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{3}
}

type ReviewAction int32

const (
	ReviewAction_REVIEW_ACTION_UNSPECIFIED ReviewAction = 0
	ReviewAction_ACCEPT                    ReviewAction = 1
	ReviewAction_MODIFY                    ReviewAction = 2
	ReviewAction_REJECT                    ReviewAction = 3
)

// Enum value maps for ReviewAction.
var (
	ReviewAction_name = map[int32]string{
		0: "REVIEW_ACTION_UNSPECIFIED",
		1: "ACCEPT",
		2: "MODIFY",
		3: "REJECT",
	}
	ReviewAction_value = map[string]int32{
		"REVIEW_ACTION_UNSPECIFIED": 0,
		"ACCEPT":                    1,
		"MODIFY":                    2,
		"REJECT":                    3,
	}
)

func (x ReviewAction) Enum() *ReviewAction {
	p := new(ReviewAction)
	*p = x
	return p
}

func (x ReviewAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewAction) Descriptor() protoreflect.EnumDescriptor {
	return file_medical_service_proto_enumTypes[4].Descriptor()
}

func (ReviewAction) Type() protoreflect.EnumType {
	return &file_medical_service_proto_enumTypes[4]
}

func (x ReviewAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewAction.Descriptor instead.
func (ReviewAction) EnumDescriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{4}
}

type UUID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         []byte                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UUID) Reset() {
	*x = UUID{}
	mi := &file_medical_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{0}
}

func (x *UUID) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type QuestionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuestionId    *UUID                  `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	QuestionText  string                 `protobuf:"bytes,2,opt,name=question_text,json=questionText,proto3" json:"question_text,omitempty"`
	UserContext   *UserContext           `protobuf:"bytes,3,opt,name=user_context,json=userContext,proto3" json:"user_context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionRequest) Reset() {
	*x = QuestionRequest{}
	mi := &file_medical_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionRequest) ProtoMessage() {}

func (x *QuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionRequest.ProtoReflect.Descriptor instead.
func (*QuestionRequest) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{1}
}

func (x *QuestionRequest) GetQuestionId() *UUID {
	if x != nil {
		return x.QuestionId
	}
	return nil
}

func (x *QuestionRequest) GetQuestionText() string {
	if x != nil {
		return x.QuestionText
	}
	return ""
}

func (x *QuestionRequest) GetUserContext() *UserContext {
	if x != nil {
		return x.UserContext
	}
	return nil
}

type UserContext struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInfo      *UserInfo              `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	BiometricData []*BiometricData       `protobuf:"bytes,2,rep,name=biometric_data,json=biometricData,proto3" json:"biometric_data,omitempty"`
	ChatHistory   []*ChatMessage         `protobuf:"bytes,3,rep,name=chat_history,json=chatHistory,proto3" json:"chat_history,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserContext) Reset() {
	*x = UserContext{}
	mi := &file_medical_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserContext) ProtoMessage() {}

func (x *UserContext) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserContext.ProtoReflect.Descriptor instead.
func (*UserContext) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{2}
}

func (x *UserContext) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *UserContext) GetBiometricData() []*BiometricData {
	if x != nil {
		return x.BiometricData
	}
	return nil
}

func (x *UserContext) GetChatHistory() []*ChatMessage {
	if x != nil {
		return x.ChatHistory
	}
	return nil
}

type UserInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Age            string                 `protobuf:"bytes,1,opt,name=age,proto3" json:"age,omitempty"`
	Gender         Gender                 `protobuf:"varint,2,opt,name=gender,proto3,enum=backend.Gender" json:"gender,omitempty"`
	MedicalHistory []string               `protobuf:"bytes,3,rep,name=medical_history,json=medicalHistory,proto3" json:"medical_history,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	mi := &file_medical_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{3}
}

func (x *UserInfo) GetAge() string {
	if x != nil {
		return x.Age
	}
	return ""
}

func (x *UserInfo) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_GENDER_UNKNOWN
}

func (x *UserInfo) GetMedicalHistory() []string {
	if x != nil {
		return x.MedicalHistory
	}
	return nil
}

type BiometricData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          BiometricType          `protobuf:"varint,1,opt,name=type,proto3,enum=backend.BiometricType" json:"type,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BiometricData) Reset() {
	*x = BiometricData{}
	mi := &file_medical_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BiometricData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiometricData) ProtoMessage() {}

func (x *BiometricData) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiometricData.ProtoReflect.Descriptor instead.
func (*BiometricData) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{4}
}

func (x *BiometricData) GetType() BiometricType {
	if x != nil {
		return x.Type
	}
	return BiometricType_BIOMETRIC_UNKNOWN
}

func (x *BiometricData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *BiometricData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ChatMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          Role                   `protobuf:"varint,1,opt,name=role,proto3,enum=backend.Role" json:"role,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_medical_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{5}
}

func (x *ChatMessage) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_UNKNOWN
}

func (x *ChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type QuestionResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	QuestionId      *UUID                  `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	DraftAnswer     string                 `protobuf:"bytes,2,opt,name=draft_answer,json=draftAnswer,proto3" json:"draft_answer,omitempty"`
	References      []string               `protobuf:"bytes,3,rep,name=references,proto3" json:"references,omitempty"`
	ConfidenceScore float32                `protobuf:"fixed32,4,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QuestionResponse) Reset() {
	*x = QuestionResponse{}
	mi := &file_medical_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionResponse) ProtoMessage() {}

func (x *QuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionResponse.ProtoReflect.Descriptor instead.
func (*QuestionResponse) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{6}
}

func (x *QuestionResponse) GetQuestionId() *UUID {
	if x != nil {
		return x.QuestionId
	}
	return nil
}

func (x *QuestionResponse) GetDraftAnswer() string {
	if x != nil {
		return x.DraftAnswer
	}
	return ""
}

func (x *QuestionResponse) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *QuestionResponse) GetConfidenceScore() float32 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

// WebSocket messages
type WebSocketMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  MessageType            `protobuf:"varint,1,opt,name=type,proto3,enum=backend.MessageType" json:"type,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*WebSocketMessage_Message
	//	*WebSocketMessage_AiDraft
	//	*WebSocketMessage_Review
	Payload       isWebSocketMessage_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebSocketMessage) Reset() {
	*x = WebSocketMessage{}
	mi := &file_medical_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebSocketMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebSocketMessage) ProtoMessage() {}

func (x *WebSocketMessage) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebSocketMessage.ProtoReflect.Descriptor instead.
func (*WebSocketMessage) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{7}
}

func (x *WebSocketMessage) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

func (x *WebSocketMessage) GetPayload() isWebSocketMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *WebSocketMessage) GetMessage() *Message {
	if x != nil {
		if x, ok := x.Payload.(*WebSocketMessage_Message); ok {
			return x.Message
		}
	}
	return nil
}

func (x *WebSocketMessage) GetAiDraft() *AIDraftReady {
	if x != nil {
		if x, ok := x.Payload.(*WebSocketMessage_AiDraft); ok {
			return x.AiDraft
		}
	}
	return nil
}

func (x *WebSocketMessage) GetReview() *DraftReview {
	if x != nil {
		if x, ok := x.Payload.(*WebSocketMessage_Review); ok {
			return x.Review
		}
	}
	return nil
}

type isWebSocketMessage_Payload interface {
	isWebSocketMessage_Payload()
}

type WebSocketMessage_Message struct {
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3,oneof"` // For questions and messages
}

type WebSocketMessage_AiDraft struct {
	AiDraft *AIDraftReady `protobuf:"bytes,3,opt,name=ai_draft,json=aiDraft,proto3,oneof"` // For sending AI draft to doctor
}

type WebSocketMessage_Review struct {
	Review *DraftReview `protobuf:"bytes,4,opt,name=review,proto3,oneof"` // For doctor's review of AI draft
}

func (*WebSocketMessage_Message) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_AiDraft) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_Review) isWebSocketMessage_Payload() {}

type Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_medical_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{8}
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type AIDraftReady struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MessageId       string                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	OriginalMessage string                 `protobuf:"bytes,2,opt,name=original_message,json=originalMessage,proto3" json:"original_message,omitempty"`
	Draft           string                 `protobuf:"bytes,3,opt,name=draft,proto3" json:"draft,omitempty"`
	Timestamp       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AIDraftReady) Reset() {
	*x = AIDraftReady{}
	mi := &file_medical_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIDraftReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIDraftReady) ProtoMessage() {}

func (x *AIDraftReady) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIDraftReady.ProtoReflect.Descriptor instead.
func (*AIDraftReady) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{9}
}

func (x *AIDraftReady) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *AIDraftReady) GetOriginalMessage() string {
	if x != nil {
		return x.OriginalMessage
	}
	return ""
}

func (x *AIDraftReady) GetDraft() string {
	if x != nil {
		return x.Draft
	}
	return ""
}

func (x *AIDraftReady) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type DraftReview struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     string                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Action        ReviewAction           `protobuf:"varint,2,opt,name=action,proto3,enum=backend.ReviewAction" json:"action,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DraftReview) Reset() {
	*x = DraftReview{}
	mi := &file_medical_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DraftReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DraftReview) ProtoMessage() {}

func (x *DraftReview) ProtoReflect() protoreflect.Message {
	mi := &file_medical_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DraftReview.ProtoReflect.Descriptor instead.
func (*DraftReview) Descriptor() ([]byte, []int) {
	return file_medical_service_proto_rawDescGZIP(), []int{10}
}

func (x *DraftReview) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *DraftReview) GetAction() ReviewAction {
	if x != nil {
		return x.Action
	}
	return ReviewAction_REVIEW_ACTION_UNSPECIFIED
}

func (x *DraftReview) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *DraftReview) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_medical_service_proto protoreflect.FileDescriptor

var file_medical_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x1c, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x9f, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x2e, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3d, 0x0a, 0x0e, 0x62, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x42, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0d, 0x62, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x37, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x6e, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x42, 0x69,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x42, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x84, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xb0,
	0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0xd9, 0x01, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x08, 0x61, 0x69, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x49, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x48, 0x00, 0x52, 0x07, 0x61, 0x69, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5d, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xa8, 0x01, 0x0a,
	0x0c, 0x41, 0x49, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0x4c, 0x0a, 0x04, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x44, 0x4f,
	0x43, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x2a, 0x40, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x7a, 0x0a, 0x0d, 0x42, 0x69, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x49,
	0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x49, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x48,
	0x45, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x42,
	0x49, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x42, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x4f,
	0x58, 0x59, 0x47, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x49, 0x4f, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x42, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x55, 0x52, 0x45, 0x10, 0x03, 0x2a, 0x7a, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x4f, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x49, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10,
	0x04, 0x2a, 0x51, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0x03, 0x32, 0x60, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x51,
	0x41, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x18, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x2f,
	0x6c, 0x6c, 0x6d, 0x2d, 0x71, 0x61, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x72,
	0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_medical_service_proto_rawDescOnce sync.Once
	file_medical_service_proto_rawDescData = file_medical_service_proto_rawDesc
)

func file_medical_service_proto_rawDescGZIP() []byte {
	file_medical_service_proto_rawDescOnce.Do(func() {
		file_medical_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_medical_service_proto_rawDescData)
	})
	return file_medical_service_proto_rawDescData
}

var file_medical_service_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_medical_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_medical_service_proto_goTypes = []any{
	(Role)(0),                     // 0: backend.Role
	(Gender)(0),                   // 1: backend.Gender
	(BiometricType)(0),            // 2: backend.BiometricType
	(MessageType)(0),              // 3: backend.MessageType
	(ReviewAction)(0),             // 4: backend.ReviewAction
	(*UUID)(nil),                  // 5: backend.UUID
	(*QuestionRequest)(nil),       // 6: backend.QuestionRequest
	(*UserContext)(nil),           // 7: backend.UserContext
	(*UserInfo)(nil),              // 8: backend.UserInfo
	(*BiometricData)(nil),         // 9: backend.BiometricData
	(*ChatMessage)(nil),           // 10: backend.ChatMessage
	(*QuestionResponse)(nil),      // 11: backend.QuestionResponse
	(*WebSocketMessage)(nil),      // 12: backend.WebSocketMessage
	(*Message)(nil),               // 13: backend.Message
	(*AIDraftReady)(nil),          // 14: backend.AIDraftReady
	(*DraftReview)(nil),           // 15: backend.DraftReview
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
}
var file_medical_service_proto_depIdxs = []int32{
	5,  // 0: backend.QuestionRequest.question_id:type_name -> backend.UUID
	7,  // 1: backend.QuestionRequest.user_context:type_name -> backend.UserContext
	8,  // 2: backend.UserContext.user_info:type_name -> backend.UserInfo
	9,  // 3: backend.UserContext.biometric_data:type_name -> backend.BiometricData
	10, // 4: backend.UserContext.chat_history:type_name -> backend.ChatMessage
	1,  // 5: backend.UserInfo.gender:type_name -> backend.Gender
	2,  // 6: backend.BiometricData.type:type_name -> backend.BiometricType
	16, // 7: backend.BiometricData.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 8: backend.ChatMessage.role:type_name -> backend.Role
	16, // 9: backend.ChatMessage.timestamp:type_name -> google.protobuf.Timestamp
	5,  // 10: backend.QuestionResponse.question_id:type_name -> backend.UUID
	3,  // 11: backend.WebSocketMessage.type:type_name -> backend.MessageType
	13, // 12: backend.WebSocketMessage.message:type_name -> backend.Message
	14, // 13: backend.WebSocketMessage.ai_draft:type_name -> backend.AIDraftReady
	15, // 14: backend.WebSocketMessage.review:type_name -> backend.DraftReview
	16, // 15: backend.Message.timestamp:type_name -> google.protobuf.Timestamp
	16, // 16: backend.AIDraftReady.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 17: backend.DraftReview.action:type_name -> backend.ReviewAction
	16, // 18: backend.DraftReview.timestamp:type_name -> google.protobuf.Timestamp
	6,  // 19: backend.MedicalQAService.GenerateDraftAnswer:input_type -> backend.QuestionRequest
	11, // 20: backend.MedicalQAService.GenerateDraftAnswer:output_type -> backend.QuestionResponse
	20, // [20:21] is the sub-list for method output_type
	19, // [19:20] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_medical_service_proto_init() }
func file_medical_service_proto_init() {
	if File_medical_service_proto != nil {
		return
	}
	file_medical_service_proto_msgTypes[7].OneofWrappers = []any{
		(*WebSocketMessage_Message)(nil),
		(*WebSocketMessage_AiDraft)(nil),
		(*WebSocketMessage_Review)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_medical_service_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_medical_service_proto_goTypes,
		DependencyIndexes: file_medical_service_proto_depIdxs,
		EnumInfos:         file_medical_service_proto_enumTypes,
		MessageInfos:      file_medical_service_proto_msgTypes,
	}.Build()
	File_medical_service_proto = out.File
	file_medical_service_proto_rawDesc = nil
	file_medical_service_proto_goTypes = nil
	file_medical_service_proto_depIdxs = nil
}
